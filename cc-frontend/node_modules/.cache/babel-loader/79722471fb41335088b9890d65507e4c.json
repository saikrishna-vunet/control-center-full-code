{"ast":null,"code":"import * as React from 'react';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { visuallyHidden } from '@mui/utils';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddCircleOutlineRoundedIcon from '@mui/icons-material/AddCircleOutlineRounded';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst deleteHost = async data => {\n  try {\n    const response = await axios({\n      method: \"put\",\n      url: \"http://127.0.0.1:8000/api/hosts/\",\n      data: data,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    console.log(response);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n} // This method is created for cross-browser compatibility, if you don't\n// need to support IE11, you can use Array.prototype.sort() directly\n\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n\n    if (order !== 0) {\n      return order;\n    }\n\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [{\n  id: 'name',\n  numeric: false,\n  disablePadding: false,\n  label: 'Name'\n}, {\n  id: 'Running_services',\n  numeric: true,\n  disablePadding: false,\n  label: '# of services,containers'\n}, {\n  id: 'services',\n  numeric: false,\n  disablePadding: false,\n  label: 'Services'\n}, {\n  id: 'health_status',\n  numeric: false,\n  disablePadding: false,\n  label: 'Health Status'\n}];\n\nfunction EnhancedTableHead(props) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort\n  } = props;\n\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return _jsx(TableHead, {\n    children: _jsxs(TableRow, {\n      children: [_jsx(TableCell, {\n        padding: \"checkbox\",\n        children: _jsx(Checkbox, {\n          color: \"primary\",\n          indeterminate: numSelected > 0 && numSelected < rowCount,\n          checked: rowCount > 0 && numSelected === rowCount,\n          onChange: onSelectAllClick,\n          inputProps: {\n            'aria-label': 'select all hosts'\n          }\n        })\n      }), headCells.map(headCell => headCell.id !== 'services' ? _jsx(TableCell, {\n        align: \"left\" //{headCell.numeric ? 'right' : 'left'}\n        ,\n        padding: headCell.disablePadding ? 'none' : 'normal',\n        sortDirection: orderBy === headCell.id ? order : false,\n        children: _jsxs(TableSortLabel, {\n          active: orderBy === headCell.id,\n          direction: orderBy === headCell.id ? order : 'asc',\n          onClick: createSortHandler(headCell.id),\n          children: [headCell.label, orderBy === headCell.id ? _jsx(Box, {\n            component: \"span\",\n            sx: visuallyHidden,\n            children: order === 'desc' ? 'sorted descending' : 'sorted ascending'\n          }) : null]\n        })\n      }, headCell.id) : _jsx(TableCell, {\n        align: \"left\" //{headCell.numeric ? 'right' : 'left'}\n        ,\n        padding: headCell.disablePadding ? 'none' : 'normal',\n        children: headCell.label\n      }, headCell.id)), _jsx(TableCell, {\n        children: \"Actions\"\n      })]\n    })\n  });\n}\n\nexport const HostsTable = ({\n  data\n}) => {\n  const navigate = useNavigate();\n\n  const routeChangeView = name => {\n    const path = `/app/controlcenter/HostsInfo`;\n    navigate(path, {\n      state: {\n        id: name\n      }\n    });\n  };\n\n  const routeChangeEdit = name => {\n    const path = `/app/controlcenter/EditHosts`;\n    navigate(path, {\n      state: {\n        id: name\n      }\n    });\n  };\n\n  const [orderBy, setOrderBy] = React.useState('name');\n  const [order, setOrder] = React.useState('asc');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(true);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [searched, setSearched] = React.useState(\"\");\n  const [rows1, setRows1] = React.useState(data);\n  const [numSelected, setNums] = React.useState(0);\n  React.useEffect(() => {\n    setRows1(data);\n    setNums(selected.length);\n  }, [data, selected.length]);\n  const [migrateList, setMigrateList] = React.useState();\n\n  const requestSearch = searchedVal => {\n    const filteredRows = data.filter(row => {\n      return row.name.toLowerCase().includes(searchedVal.toLowerCase());\n    });\n    setRows1(filteredRows);\n  };\n\n  const cancelSearch = () => {\n    setSearched(\"\");\n    requestSearch(searched);\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const newSelecteds = rows1.map(n => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleHostsView = (event, name) => {\n    console.log(name + \"View\");\n    event.preventDefault();\n    event.stopPropagation();\n    routeChangeView(name);\n  };\n\n  const [typeData, setTypeData] = React.useState({});\n  const [hostobjDelete, sethostobjDelete] = React.useState();\n\n  const handleHostsDelete = (event, hostobj) => {\n    sethostobjDelete(hostobj); // console.log(\"hostobjdelete\"+JSON.stringify(hostobjDelete));\n    // console.log(\"Delete\");\n    // console.log(JSON.stringify(hostobj));\n\n    if (JSON.stringify(hostobj['services']) === JSON.stringify([])) {\n      alert('host has no service running on it. Deletion will be done');\n      deleteHost('delete ' + hostobj['name']);\n    } else {\n      // alert('There are services running on the host. Deletion is not possible');\n      HostServiceTypes(hostobj);\n      handleClickOpen();\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const routeChangeAddHosts = () => {\n    const path = `/app/controlcenter/AddHosts`;\n    navigate(path);\n  };\n\n  const handleHostsEdit = (event, name) => {\n    console.log(name + \"Edit\");\n    event.preventDefault();\n    event.stopPropagation();\n    routeChangeEdit(name);\n  };\n\n  const isSelected = name => selected.indexOf(name) !== -1; // Avoid a layout jump when reaching the last page with empty rows.\n\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;\n\n  const getServices = row => {\n    let str = \"\";\n\n    for (let i = 0; i < row.length; i++) {\n      str = str + row[i].Name + '(' + JSON.stringify(row[i].Instances) + ')';\n      if (i !== row.length - 1) str = str + ',';\n    }\n\n    return str;\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [migrateopen, setMigrateOpen] = React.useState(false);\n\n  const handleMigrateOpen = () => {\n    handleClose();\n    setMigrateOpen(true);\n    console.log(\"host obj from migrate\" + JSON.stringify(hostobjDelete));\n    handleMigrate(hostobjDelete);\n    console.log(\"Migrate List\" + JSON.stringify(migrateList));\n  };\n\n  const handleMigrateClose = () => {\n    setMigrateOpen(false);\n  };\n\n  async function handleMigrate(hostobj) {\n    try {\n      const response = await axios({\n        method: \"put\",\n        url: \"http://127.0.0.1:8000/api/migrateservices/\",\n        data: JSON.stringify(hostobj),\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      setMigrateList(response.data);\n      console.log(\"Response\" + response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function HostServiceTypes(data) {\n    let temp = '';\n\n    try {\n      const response = await axios({\n        method: \"put\",\n        url: \"http://127.0.0.1:8000/api/servicetypes/\",\n        data: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      temp = JSON.stringify(response.data);\n      setTypeData(response.data);\n    } catch (error) {\n      console.log(error);\n      temp = \"failed\";\n    }\n\n    console.log(temp);\n    return temp;\n  }\n\n  ;\n  return _jsxs(Box, {\n    sx: {\n      width: '100%'\n    },\n    children: [_jsxs(Paper, {\n      sx: {\n        width: '100%',\n        mb: 2\n      },\n      children: [_jsxs(Toolbar, {\n        sx: Object.assign({\n          pl: {\n            sm: 2\n          },\n          pr: {\n            xs: 1,\n            sm: 1\n          }\n        }, numSelected > 0 && {\n          bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n        }),\n        children: [numSelected > 0 ? _jsxs(Typography, {\n          sx: {\n            flex: '1 1 100%'\n          },\n          color: \"inherit\",\n          variant: \"subtitle1\",\n          component: \"div\",\n          children: [numSelected, \" selected\"]\n        }) : _jsx(Typography, {\n          sx: {\n            flex: '1 1 100%'\n          },\n          variant: \"h6\",\n          id: \"tableTitle\",\n          component: \"div\",\n          children: \"Hosts\"\n        }), numSelected > 0 ? _jsx(Tooltip, {\n          title: \"Delete\",\n          children: _jsx(IconButton, {\n            children: _jsx(DeleteIcon, {})\n          })\n        }) : _jsx(_Fragment, {\n          children: _jsx(Tooltip, {\n            title: \"Add Host\",\n            children: _jsx(IconButton, {\n              onClick: routeChangeAddHosts,\n              children: _jsx(AddCircleOutlineRoundedIcon, {})\n            })\n          })\n        })]\n      }), _jsx(Paper, {\n        sx: {\n          width: '20%',\n          textAlign: 'center'\n        }\n      }), _jsx(TableContainer, {\n        children: _jsxs(Table, {\n          sx: {\n            minWidth: 70\n          },\n          \"aria-labelledby\": \"tableTitle\",\n          size: dense ? 'small' : 'medium',\n          children: [_jsx(EnhancedTableHead, {\n            numSelected: selected.length,\n            order: order,\n            orderBy: orderBy,\n            onSelectAllClick: handleSelectAllClick,\n            onRequestSort: handleRequestSort,\n            rowCount: rows1.length\n          }), _jsxs(TableBody, {\n            children: [rows1.slice().sort(getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n              const isItemSelected = isSelected(row.name);\n              const labelId = `enhanced-table-checkbox-${index}`;\n              return _jsxs(TableRow, {\n                hover: true,\n                onClick: event => handleClick(event, row.name),\n                role: \"checkbox\",\n                \"aria-checked\": isItemSelected,\n                tabIndex: -1,\n                selected: isItemSelected //   sx={{padding:\"checkbox\"}}\n                ,\n                sx: {\n                  '&:last-child td, &:last-child th': {\n                    border: 0\n                  }\n                },\n                children: [_jsx(TableCell, {\n                  padding: \"checkbox\",\n                  width: \"5%\",\n                  children: _jsx(Checkbox, {\n                    color: \"primary\",\n                    checked: isItemSelected,\n                    inputProps: {\n                      'aria-labelledby': labelId\n                    }\n                  })\n                }), _jsx(TableCell, {\n                  component: \"th\",\n                  id: labelId,\n                  scope: \"row\",\n                  padding: \"checkbox\",\n                  align: \"left\",\n                  width: \"25%\",\n                  children: row.name\n                }), _jsx(TableCell, {\n                  align: \"left\",\n                  width: \"5%\",\n                  children: JSON.stringify(row.Running_services) + '/' + JSON.stringify(row.Running_instances)\n                }), _jsx(TableCell, {\n                  align: \"left\",\n                  width: \"25%\",\n                  children: getServices(row.services)\n                }), _jsx(TableCell, {\n                  align: \"left\",\n                  width: \"5%\",\n                  children: row.health_status\n                }), _jsxs(TableCell, {\n                  align: \"left\",\n                  width: \"25%\",\n                  children: [_jsx(Tooltip, {\n                    title: \"Hosts Detail\",\n                    children: _jsx(IconButton, {\n                      onClick: event => handleHostsView(event, row.name),\n                      children: _jsx(VisibilityIcon, {\n                        sx: {\n                          fontSize: 20\n                        }\n                      })\n                    })\n                  }), _jsx(Tooltip, {\n                    title: \"Edit\",\n                    children: _jsx(IconButton, {\n                      onClick: event => handleHostsEdit(event, row.name),\n                      children: _jsx(EditIcon, {\n                        sx: {\n                          fontSize: 20\n                        }\n                      })\n                    })\n                  }), _jsx(Tooltip, {\n                    title: \"delete host\",\n                    children: _jsx(IconButton, {\n                      onClick: event => handleHostsDelete(event, row),\n                      children: _jsx(DeleteIcon, {})\n                    })\n                  })]\n                })]\n              }, row.name);\n            }), emptyRows > 0 && _jsx(TableRow, {\n              style: {\n                height: (dense ? 33 : 53) * emptyRows\n              },\n              children: _jsx(TableCell, {\n                colSpan: 6\n              })\n            })]\n          })]\n        })\n      }), _jsx(TablePagination, {\n        rowsPerPageOptions: [5, 10, 25],\n        component: \"div\",\n        count: rows1.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onPageChange: handleChangePage,\n        onRowsPerPageChange: handleChangeRowsPerPage\n      })]\n    }), _jsx(\"div\", {\n      children: _jsxs(Dialog, {\n        open: open,\n        onClose: handleClose,\n        children: [_jsx(DialogTitle, {\n          children: \"There are few services running on this host.Upon Deletion,Data will be lost\"\n        }), _jsx(DialogContent, {\n          children: _jsx(Box, {\n            bgcolor: \"#eeeeee\",\n            sx: {\n              p: 2\n            },\n            children: _jsx(DialogContentText, {\n              children: _jsx(Typography, {\n                sx: {\n                  whiteSpace: 'pre-line',\n                  fontFamily: 'monospace',\n                  flex: 1,\n                  flexWrap: 'wrap'\n                },\n                color: \"red\",\n                children: Object.entries(typeData).map(([key, value]) => _jsxs(\"div\", {\n                  children: [key, '=>', JSON.stringify(value)]\n                }))\n              })\n            })\n          })\n        }), _jsxs(DialogActions, {\n          children: [_jsx(Button, {\n            onClick: handleMigrateOpen,\n            children: \"Migrate\"\n          }), _jsx(Button, {\n            onClick: handleClose,\n            children: \"Close\"\n          }), _jsx(Box, {\n            children: _jsx(Button, {\n              onClick: handleClose,\n              children: \"Delete anyway\"\n            })\n          })]\n        })]\n      })\n    }), _jsx(\"div\", {\n      children: _jsxs(Dialog, {\n        open: migrateopen,\n        onClose: handleMigrateClose,\n        children: [_jsx(DialogTitle, {\n          children: \"Services that can be migrated\"\n        }), _jsx(DialogContent, {\n          children: _jsx(Box, {\n            bgcolor: \"#eeeeee\",\n            sx: {\n              p: 2\n            },\n            children: _jsx(DialogContentText, {\n              children: _jsx(Typography, {\n                sx: {\n                  whiteSpace: 'pre-line',\n                  fontFamily: 'monospace',\n                  flex: 1,\n                  flexWrap: 'wrap'\n                },\n                color: \"red\",\n                children: JSON.stringify(migrateList == null ? void 0 : migrateList.p)\n              })\n            })\n          })\n        }), _jsx(DialogTitle, {\n          children: \"Services that cannot be migrated\"\n        }), _jsx(DialogContent, {\n          children: _jsx(Box, {\n            bgcolor: \"#eeeeee\",\n            sx: {\n              p: 2\n            },\n            children: _jsx(DialogContentText, {\n              children: _jsx(Typography, {\n                sx: {\n                  whiteSpace: 'pre-line',\n                  fontFamily: 'monospace',\n                  flex: 1,\n                  flexWrap: 'wrap'\n                },\n                color: \"red\",\n                children: JSON.stringify(migrateList == null ? void 0 : migrateList.np)\n              })\n            })\n          })\n        }), _jsx(DialogActions, {\n          children: _jsx(Button, {\n            onClick: handleMigrateClose,\n            children: \"Close\"\n          })\n        })]\n      })\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}