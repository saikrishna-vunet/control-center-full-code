{"ast":null,"code":"import * as React from 'react';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { visuallyHidden } from '@mui/utils';\nimport PlayCircleOutlineRoundedIcon from '@mui/icons-material/PlayCircleOutlineRounded';\nimport PauseCircleOutlineRoundedIcon from '@mui/icons-material/PauseCircleOutlineRounded';\nimport AssignmentRoundedIcon from '@mui/icons-material/AssignmentRounded';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport LoginSharpIcon from '@mui/icons-material/LoginSharp';\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { green } from '@mui/material/colors';\nimport { createTheme } from '@material-ui/core/styles';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport url_backend from '../configs/url';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst theme = createTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        //This can be referred from Material UI API documentation. \n        padding: '4px 8px',\n        backgroundColor: \"#fff\"\n      }\n    }\n  }\n});\nconst useStyles = makeStyles({\n  tableRow: {\n    height: 30\n  },\n  tableCell: {\n    padding: \"0px 16px\"\n  }\n});\n\nconst actionContainer = async data => {\n  const request_url = url_backend + '/api/containers/';\n\n  try {\n    const response = await axios({\n      method: \"put\",\n      url: request_url,\n      data: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    console.log(response);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n} // This method is created for cross-browser compatibility, if you don't\n// need to support IE11, you can use Array.prototype.sort() directly\n\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n\n    if (order !== 0) {\n      return order;\n    }\n\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [{\n  id: 'name',\n  numeric: false,\n  disablePadding: false,\n  label: 'Name'\n}, {\n  id: 'host',\n  numeric: false,\n  disablePadding: false,\n  label: 'Node'\n}];\n\nfunction EnhancedTableHead(props) {\n  const {\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort\n  } = props;\n\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return _jsx(TableHead, {\n    children: _jsxs(TableRow, {\n      children: [_jsx(TableCell, {\n        padding: \"checkbox\",\n        children: _jsx(Checkbox, {\n          color: \"primary\",\n          indeterminate: numSelected > 0 && numSelected < rowCount,\n          checked: rowCount > 0 && numSelected === rowCount,\n          onChange: onSelectAllClick,\n          inputProps: {\n            'aria-label': 'select all containers'\n          }\n        })\n      }), headCells.map(headCell => _jsx(TableCell, {\n        align: \"left\" //{headCell.numeric ? 'right' : 'left'}\n        ,\n        padding: headCell.disablePadding ? 'none' : 'normal',\n        sortDirection: orderBy === headCell.id ? order : false,\n        children: _jsxs(TableSortLabel, {\n          active: orderBy === headCell.id,\n          direction: orderBy === headCell.id ? order : 'asc',\n          onClick: createSortHandler(headCell.id),\n          children: [headCell.label, orderBy === headCell.id ? _jsx(Box, {\n            component: \"span\",\n            sx: visuallyHidden,\n            children: order === 'desc' ? 'sorted descending' : 'sorted ascending'\n          }) : null]\n        })\n      }, headCell.id)), _jsx(TableCell, {\n        children: \"Actions\"\n      })]\n    })\n  });\n}\n\nconst EnhancedTableToolbar = props => {\n  const {\n    numSelected\n  } = props;\n  const navigate = useNavigate();\n\n  const routeChange = () => {\n    const path = `/app/controlcenter/Services`;\n    navigate(path);\n  };\n\n  return _jsxs(Toolbar, {\n    sx: Object.assign({\n      pl: {\n        sm: 2\n      },\n      pr: {\n        xs: 1,\n        sm: 1\n      }\n    }, numSelected > 0 && {\n      bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n    }),\n    children: [numSelected > 0 ? _jsxs(Typography, {\n      sx: {\n        flex: '1 1 100%'\n      },\n      color: \"inherit\",\n      variant: \"subtitle1\",\n      component: \"div\",\n      children: [numSelected, \" selected\"]\n    }) : _jsx(Typography, {\n      sx: {\n        flex: '1 1 100%'\n      },\n      variant: \"h6\",\n      id: \"tableTitlParameter 'singleOption' implicitly has an 'any' typee\",\n      component: \"div\",\n      children: \"Container Instances\"\n    }), numSelected > 0 ? _jsxs(_Fragment, {\n      children: [_jsx(Tooltip, {\n        title: \"Start Service\",\n        children: _jsx(IconButton, {\n          children: _jsx(PlayCircleOutlineRoundedIcon, {})\n        })\n      }), _jsx(Tooltip, {\n        title: \"Stop Service\",\n        children: _jsx(IconButton, {\n          children: _jsx(PauseCircleOutlineRoundedIcon, {})\n        })\n      }), _jsx(Tooltip, {\n        title: \"Delete\",\n        children: _jsx(IconButton, {\n          children: _jsx(DeleteIcon, {})\n        })\n      })]\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Tooltip, {\n        title: \"Expanded view\",\n        children: _jsx(IconButton, {\n          onClick: routeChange,\n          children: _jsx(AssignmentRoundedIcon, {})\n        })\n      }), _jsx(TextField, {\n        autoFocus: true,\n        margin: \"dense\",\n        id: \"name\",\n        label: \"Email Address\",\n        type: \"email\",\n        fullWidth: true,\n        variant: \"standard\"\n      })]\n    })]\n  });\n};\n\nexport const ContainerTable = ({\n  data\n}) => {\n  const navigate = useNavigate();\n\n  const routeChange = () => {\n    const path = `/app/controlcenter/Services`;\n    navigate(path);\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const [logdata, setLogdata] = React.useState('');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [orderBy, setOrderBy] = React.useState('name');\n  const [order, setOrder] = React.useState('asc');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(true);\n  const [rowsPerPage, setRowsPerPage] = React.useState(8);\n  const [searched, setSearched] = React.useState(\"\");\n  const [numSelected, setNums] = React.useState(0);\n  const [currLogs, setCurrLogs] = React.useState('');\n  const [rows1, setRows1] = React.useState(data);\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const timer = React.useRef();\n  const buttonSx = Object.assign({}, success && {\n    bgcolor: green[500],\n    '&:hover': {\n      bgcolor: green[700]\n    }\n  });\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  const handleButtonClick = () => {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n      timer.current = window.setTimeout(() => {\n        setSuccess(true);\n        setLoading(false);\n      }, 2000);\n    }\n\n    getLogs(currLogs).then(res => {\n      setLogdata(res);\n    });\n  };\n\n  React.useEffect(() => {\n    setRows1(data);\n  }, [data]);\n  React.useEffect(() => {\n    setNums(selected.length);\n  }, [selected.length]);\n\n  const getLogs = async id => {\n    let url = url_backend + '/api/logs/?_id=';\n    url = url + id;\n    console.log(url);\n\n    try {\n      const data = await axios.get(url);\n      return JSON.parse(JSON.stringify(data.data));\n    } catch (e) {\n      console.log(e);\n      return \"cannot connect to container\";\n    }\n  };\n\n  const requestSearch = searchedVal => {\n    const filteredRows = data.filter(row => {\n      return row.name.toLowerCase().includes(searchedVal.toLowerCase());\n    });\n    setRows1(filteredRows);\n  };\n\n  const cancelSearch = () => {\n    setSearched(\"\");\n    requestSearch(searched);\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const newSelecteds = rows1.map(n => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const routeChangeView = name => {\n    const path = `/app/controlcenter/ContainersInfo`;\n    navigate(path, {\n      state: {\n        id: name\n      }\n    });\n  };\n\n  const handleContainerView = (event, name) => {\n    console.log(name);\n    event.preventDefault();\n    event.stopPropagation();\n    routeChangeView(name);\n  };\n\n  const handleRefresh = () => {\n    // window. location. reload();\n    getLogs(currLogs).then(res => {\n      setLogdata(res);\n    });\n  };\n\n  const handleContainerLogin = (event, name) => {\n    console.log(name);\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const handleContainerLogs = (event, name) => {\n    console.log(name);\n    setCurrLogs(name);\n    event.preventDefault();\n    event.stopPropagation();\n    handleClickOpen();\n    getLogs(name).then(res => {\n      setLogdata(res);\n    });\n  };\n\n  const startContainer = () => {\n    console.log(selected);\n    let temp = {};\n    selected.forEach(function (item, index) {\n      temp = {\n        \"name\": item,\n        \"action\": \"start\"\n      };\n      actionContainer(temp);\n    });\n  };\n\n  const stopContainer = () => {\n    console.log(selected);\n    let temp = {};\n    selected.forEach(function (item, index) {\n      temp = {\n        \"name\": item,\n        \"action\": \"stop\"\n      };\n      actionContainer(temp);\n    });\n  };\n\n  const deleteContainer = () => {\n    console.log(selected);\n    let temp = {};\n    selected.forEach(function (item, index) {\n      temp = {\n        \"name\": item,\n        \"action\": \"remove\"\n      };\n      actionContainer(temp);\n    });\n  };\n\n  const isSelected = name => selected.indexOf(name) !== -1; // Avoid a layout jump when reaching the last page with empty rows.\n\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;\n  const classes = useStyles();\n  return _jsxs(Box, {\n    sx: {\n      width: '100%'\n    },\n    children: [_jsxs(Paper, {\n      sx: {\n        width: '100%',\n        mb: 2\n      },\n      children: [_jsxs(Toolbar, {\n        sx: Object.assign({\n          pl: {\n            sm: 2\n          },\n          pr: {\n            xs: 1,\n            sm: 1\n          }\n        }, numSelected > 0 && {\n          bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n        }),\n        children: [numSelected > 0 ? _jsxs(Typography, {\n          sx: {\n            flex: '1 1 100%'\n          },\n          color: \"inherit\",\n          variant: \"subtitle1\",\n          component: \"div\",\n          children: [numSelected, \" selected\"]\n        }) : _jsx(Typography, {\n          sx: {\n            flex: '1 1 100%'\n          },\n          variant: \"h6\",\n          id: \"tableTitlParameter 'singleOption' implicitly has an 'any' typee\",\n          component: \"div\",\n          children: \"Container Instances\"\n        }), numSelected > 0 ? _jsxs(_Fragment, {\n          children: [_jsx(Tooltip, {\n            title: \"Start Container\",\n            children: _jsx(IconButton, {\n              onClick: startContainer,\n              children: _jsx(PlayCircleOutlineRoundedIcon, {})\n            })\n          }), _jsx(Tooltip, {\n            title: \"Stop Container\",\n            onClick: stopContainer,\n            children: _jsx(IconButton, {\n              children: _jsx(PauseCircleOutlineRoundedIcon, {})\n            })\n          }), _jsx(Tooltip, {\n            title: \"Delete\",\n            children: _jsx(IconButton, {\n              onClick: deleteContainer,\n              children: _jsx(DeleteIcon, {})\n            })\n          })]\n        }) : _jsx(_Fragment, {\n          children: _jsx(Tooltip, {\n            title: \"Expanded view\",\n            children: _jsx(IconButton, {\n              onClick: routeChange,\n              children: _jsx(AssignmentRoundedIcon, {})\n            })\n          })\n        })]\n      }), _jsx(TableContainer, {\n        children: _jsxs(Table, {\n          sx: {\n            minWidth: 70\n          },\n          \"aria-labelledby\": \"tableTitle\",\n          size: \"small\",\n          children: [_jsx(EnhancedTableHead, {\n            numSelected: selected.length,\n            order: order,\n            orderBy: orderBy,\n            onSelectAllClick: handleSelectAllClick,\n            onRequestSort: handleRequestSort,\n            rowCount: rows1.length\n          }), _jsxs(TableBody, {\n            children: [rows1.slice().sort(getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n              const isItemSelected = isSelected(row.name);\n              const labelId = `enhanced-table-checkbox-${index}`;\n              return _jsxs(TableRow, {\n                hover: true,\n                onClick: event => handleClick(event, row.name),\n                role: \"checkbox\",\n                \"aria-checked\": isItemSelected,\n                tabIndex: -1,\n                selected: isItemSelected,\n                sx: {\n                  padding: \"checkbox\"\n                },\n                className: classes.tableRow,\n                children: [_jsx(TableCell, {\n                  padding: \"checkbox\",\n                  className: classes.tableCell,\n                  children: _jsx(Checkbox, {\n                    color: \"primary\",\n                    checked: isItemSelected,\n                    inputProps: {\n                      'aria-labelledby': labelId\n                    }\n                  })\n                }), _jsx(TableCell, {\n                  component: \"th\",\n                  id: labelId,\n                  scope: \"row\",\n                  padding: \"none\",\n                  align: \"left\",\n                  className: classes.tableCell,\n                  children: row.name\n                }), _jsx(TableCell, {\n                  align: \"left\",\n                  className: classes.tableCell,\n                  children: row.host\n                }), _jsxs(TableCell, {\n                  align: \"left\",\n                  className: classes.tableCell,\n                  children: [_jsx(Tooltip, {\n                    title: \"View\",\n                    children: _jsx(IconButton, {\n                      onClick: event => handleContainerView(event, row._id),\n                      children: _jsx(VisibilityIcon, {\n                        sx: {\n                          fontSize: 20\n                        }\n                      })\n                    })\n                  }), _jsx(Tooltip, {\n                    title: \"Login\",\n                    children: _jsx(IconButton, {\n                      onClick: event => handleContainerLogin(event, row._id),\n                      children: _jsx(LoginSharpIcon, {\n                        sx: {\n                          fontSize: 20\n                        }\n                      })\n                    })\n                  }), _jsx(Tooltip, {\n                    title: \"Check Logs\",\n                    children: _jsx(IconButton, {\n                      onClick: event => handleContainerLogs(event, row.name),\n                      children: _jsx(InsertDriveFileIcon, {\n                        sx: {\n                          fontSize: 20\n                        }\n                      })\n                    })\n                  })]\n                })]\n              }, row.name);\n            }), emptyRows > 0 && _jsx(TableRow, {\n              style: {\n                height: (dense ? 33 : 53) * emptyRows\n              },\n              children: _jsx(TableCell, {\n                colSpan: 6\n              })\n            })]\n          })]\n        })\n      }), _jsx(TablePagination, {\n        rowsPerPageOptions: [8, 16, 24],\n        component: \"div\",\n        count: rows1.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onPageChange: handleChangePage,\n        onRowsPerPageChange: handleChangeRowsPerPage\n      })]\n    }), _jsx(\"div\", {\n      children: _jsxs(Dialog, {\n        open: open,\n        onClose: handleClose,\n        children: [_jsx(DialogTitle, {\n          children: \"Container Log\"\n        }), _jsx(DialogContent, {\n          children: _jsx(Box, {\n            bgcolor: \"#eeeeee\",\n            sx: {\n              p: 2\n            },\n            children: _jsx(DialogContentText, {\n              children: _jsx(Typography, {\n                sx: {\n                  whiteSpace: 'pre-line',\n                  fontFamily: 'monospace',\n                  flex: 1,\n                  flexWrap: 'wrap'\n                },\n                color: \"red\",\n                children: logdata\n              })\n            })\n          })\n        }), _jsxs(DialogActions, {\n          children: [_jsx(Button, {\n            onClick: handleClose,\n            children: \"Close\"\n          }), _jsxs(Box, {\n            children: [_jsx(Button, {\n              onClick: handleButtonClick,\n              children: \"Refresh\"\n            }), loading && _jsx(CircularProgress, {\n              size: 24,\n              sx: {\n                color: green[500],\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                marginTop: '-12px',\n                marginLeft: '-12px'\n              }\n            })]\n          })]\n        })]\n      })\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}