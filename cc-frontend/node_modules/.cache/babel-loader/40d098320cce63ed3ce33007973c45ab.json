{"ast":null,"code":"// import * as React from 'react';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import AddIcon from '@mui/icons-material/Add';\n// import EditIcon from '@mui/icons-material/Edit';\n// import DeleteIcon from '@mui/icons-material/DeleteOutlined';\n// import SaveIcon from '@mui/icons-material/Save';\n// import CancelIcon from '@mui/icons-material/Close';\n// import {\n//   GridRowsProp,\n//   GridRowModesModel,\n//   GridRowModes,\n//   DataGridPro,\n//   GridColumns,\n//   GridRowParams,\n//   MuiEvent,\n//   GridToolbarContainer,\n//   GridActionsCellItem,\n//   GridEventListener,\n//   GridRowId,\n//   GridRowModel,\n// } from '@mui/x-data-grid-pro';\n// import {\n//   randomCreatedDate,\n//   randomTraderName,\n//   randomUpdatedDate,\n//   randomId,\n// } from '@mui/x-data-grid-generator';\n// const initialRows: GridRowsProp = [\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 25,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 36,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 19,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 28,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 23,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n// ];\n// interface EditToolbarProps {\n//   setRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\n//   setRowModesModel: (\n//     newModel: (oldModel: GridRowModesModel) => GridRowModesModel,\n//   ) => void;\n// }\n// function EditToolbar(props: EditToolbarProps) {\n//   const { setRows, setRowModesModel } = props;\n//   const handleClick = () => {\n//     const id = randomId();\n//     setRows((oldRows) => [...oldRows, { id, name: '', age: '', isNew: true }]);\n//     setRowModesModel((oldModel) => ({\n//       ...oldModel,\n//       [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\n//     }));\n//   };\n//   return (\n//     <GridToolbarContainer>\n//       <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n//         Add record\n//       </Button>\n//     </GridToolbarContainer>\n//   );\n// }\n// export default function FullFeaturedCrudGrid() {\n//   const [rows, setRows] = React.useState(initialRows);\n//   const [rowModesModel, setRowModesModel] = React.useState<GridRowModesModel>({});\n//   const handleRowEditStart = (\n//     params: GridRowParams,\n//     event: MuiEvent<React.SyntheticEvent>,\n//   ) => {\n//     event.defaultMuiPrevented = true;\n//   };\n//   const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\n//     event.defaultMuiPrevented = true;\n//   };\n//   const handleEditClick = (id: GridRowId) => () => {\n//     setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n//   };\n//   const handleSaveClick = (id: GridRowId) => () => {\n//     setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n//   };\n//   const handleDeleteClick = (id: GridRowId) => () => {\n//     setRows(rows.filter((row) => row.id !== id));\n//   };\n//   const handleCancelClick = (id: GridRowId) => () => {\n//     setRowModesModel({\n//       ...rowModesModel,\n//       [id]: { mode: GridRowModes.View, ignoreModifications: true },\n//     });\n//     const editedRow = rows.find((row) => row.id === id);\n//     if (editedRow!.isNew) {\n//       setRows(rows.filter((row) => row.id !== id));\n//     }\n//   };\n//   const processRowUpdate = (newRow: GridRowModel) => {\n//     const updatedRow = { ...newRow, isNew: false };\n//     setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\n//     return updatedRow;\n//   };\n//   const columns: GridColumns = [\n//     { field: 'name', headerName: 'Name', width: 180, editable: true },\n//     { field: 'age', headerName: 'Age', type: 'number', editable: true },\n//     {\n//       field: 'dateCreated',\n//       headerName: 'Date Created',\n//       type: 'date',\n//       width: 180,\n//       editable: true,\n//     },\n//     {\n//       field: 'lastLogin',\n//       headerName: 'Last Login',\n//       type: 'dateTime',\n//       width: 220,\n//       editable: true,\n//     },\n//     {\n//       field: 'actions',\n//       type: 'actions',\n//       headerName: 'Actions',\n//       width: 100,\n//       cellClassName: 'actions',\n//       getActions: ({ id }) => {\n//         const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n//         if (isInEditMode) {\n//           return [\n//             <GridActionsCellItem\n//               icon={<SaveIcon />}\n//               label=\"Save\"\n//               onClick={handleSaveClick(id)}\n//             />,\n//             <GridActionsCellItem\n//               icon={<CancelIcon />}\n//               label=\"Cancel\"\n//               className=\"textPrimary\"\n//               onClick={handleCancelClick(id)}\n//               color=\"inherit\"\n//             />,\n//           ];\n//         }\n//         return [\n//           <GridActionsCellItem\n//             icon={<EditIcon />}\n//             label=\"Edit\"\n//             className=\"textPrimary\"\n//             onClick={handleEditClick(id)}\n//             color=\"inherit\"\n//           />,\n//           <GridActionsCellItem\n//             icon={<DeleteIcon />}\n//             label=\"Delete\"\n//             onClick={handleDeleteClick(id)}\n//             color=\"inherit\"\n//           />,\n//         ];\n//       },\n//     },\n//   ];\n//   return (\n//     <Box\n//       sx={{\n//         height: 500,\n//         width: '100%',\n//         '& .actions': {\n//           color: 'text.secondary',\n//         },\n//         '& .textPrimary': {\n//           color: 'text.primary',\n//         },\n//       }}\n//     >\n//       <DataGridPro\n//         rows={rows}\n//         columns={columns}\n//         editMode=\"row\"\n//         rowModesModel={rowModesModel}\n//         onRowEditStart={handleRowEditStart}\n//         onRowEditStop={handleRowEditStop}\n//         processRowUpdate={processRowUpdate}\n//         components={{\n//           Toolbar: EditToolbar,\n//         }}\n//         componentsProps={{\n//           toolbar: { setRows, setRowModesModel },\n//         }}\n//         experimentalFeatures={{ newEditingApi: true }}\n//       />\n//     </Box>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/home/sakthi/vunet/apps/control-center/src/pages /CRUDtable.tsx"],"sourcesContent":["// import * as React from 'react';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import AddIcon from '@mui/icons-material/Add';\n// import EditIcon from '@mui/icons-material/Edit';\n// import DeleteIcon from '@mui/icons-material/DeleteOutlined';\n// import SaveIcon from '@mui/icons-material/Save';\n// import CancelIcon from '@mui/icons-material/Close';\n// import {\n//   GridRowsProp,\n//   GridRowModesModel,\n//   GridRowModes,\n//   DataGridPro,\n//   GridColumns,\n//   GridRowParams,\n//   MuiEvent,\n//   GridToolbarContainer,\n//   GridActionsCellItem,\n//   GridEventListener,\n//   GridRowId,\n//   GridRowModel,\n// } from '@mui/x-data-grid-pro';\n// import {\n//   randomCreatedDate,\n//   randomTraderName,\n//   randomUpdatedDate,\n//   randomId,\n// } from '@mui/x-data-grid-generator';\n\n// const initialRows: GridRowsProp = [\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 25,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 36,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 19,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 28,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n//   {\n//     id: randomId(),\n//     name: randomTraderName(),\n//     age: 23,\n//     dateCreated: randomCreatedDate(),\n//     lastLogin: randomUpdatedDate(),\n//   },\n// ];\n\n// interface EditToolbarProps {\n//   setRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\n//   setRowModesModel: (\n//     newModel: (oldModel: GridRowModesModel) => GridRowModesModel,\n//   ) => void;\n// }\n\n// function EditToolbar(props: EditToolbarProps) {\n//   const { setRows, setRowModesModel } = props;\n\n//   const handleClick = () => {\n//     const id = randomId();\n//     setRows((oldRows) => [...oldRows, { id, name: '', age: '', isNew: true }]);\n//     setRowModesModel((oldModel) => ({\n//       ...oldModel,\n//       [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\n//     }));\n//   };\n\n//   return (\n//     <GridToolbarContainer>\n//       <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n//         Add record\n//       </Button>\n//     </GridToolbarContainer>\n//   );\n// }\n\n// export default function FullFeaturedCrudGrid() {\n//   const [rows, setRows] = React.useState(initialRows);\n//   const [rowModesModel, setRowModesModel] = React.useState<GridRowModesModel>({});\n\n//   const handleRowEditStart = (\n//     params: GridRowParams,\n//     event: MuiEvent<React.SyntheticEvent>,\n//   ) => {\n//     event.defaultMuiPrevented = true;\n//   };\n\n//   const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\n//     event.defaultMuiPrevented = true;\n//   };\n\n//   const handleEditClick = (id: GridRowId) => () => {\n//     setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n//   };\n\n//   const handleSaveClick = (id: GridRowId) => () => {\n//     setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n//   };\n\n//   const handleDeleteClick = (id: GridRowId) => () => {\n//     setRows(rows.filter((row) => row.id !== id));\n//   };\n\n//   const handleCancelClick = (id: GridRowId) => () => {\n//     setRowModesModel({\n//       ...rowModesModel,\n//       [id]: { mode: GridRowModes.View, ignoreModifications: true },\n//     });\n\n//     const editedRow = rows.find((row) => row.id === id);\n//     if (editedRow!.isNew) {\n//       setRows(rows.filter((row) => row.id !== id));\n//     }\n//   };\n\n//   const processRowUpdate = (newRow: GridRowModel) => {\n//     const updatedRow = { ...newRow, isNew: false };\n//     setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\n//     return updatedRow;\n//   };\n\n//   const columns: GridColumns = [\n//     { field: 'name', headerName: 'Name', width: 180, editable: true },\n//     { field: 'age', headerName: 'Age', type: 'number', editable: true },\n//     {\n//       field: 'dateCreated',\n//       headerName: 'Date Created',\n//       type: 'date',\n//       width: 180,\n//       editable: true,\n//     },\n//     {\n//       field: 'lastLogin',\n//       headerName: 'Last Login',\n//       type: 'dateTime',\n//       width: 220,\n//       editable: true,\n//     },\n//     {\n//       field: 'actions',\n//       type: 'actions',\n//       headerName: 'Actions',\n//       width: 100,\n//       cellClassName: 'actions',\n//       getActions: ({ id }) => {\n//         const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n//         if (isInEditMode) {\n//           return [\n//             <GridActionsCellItem\n//               icon={<SaveIcon />}\n//               label=\"Save\"\n//               onClick={handleSaveClick(id)}\n//             />,\n//             <GridActionsCellItem\n//               icon={<CancelIcon />}\n//               label=\"Cancel\"\n//               className=\"textPrimary\"\n//               onClick={handleCancelClick(id)}\n//               color=\"inherit\"\n//             />,\n//           ];\n//         }\n\n//         return [\n//           <GridActionsCellItem\n//             icon={<EditIcon />}\n//             label=\"Edit\"\n//             className=\"textPrimary\"\n//             onClick={handleEditClick(id)}\n//             color=\"inherit\"\n//           />,\n//           <GridActionsCellItem\n//             icon={<DeleteIcon />}\n//             label=\"Delete\"\n//             onClick={handleDeleteClick(id)}\n//             color=\"inherit\"\n//           />,\n//         ];\n//       },\n//     },\n//   ];\n\n//   return (\n//     <Box\n//       sx={{\n//         height: 500,\n//         width: '100%',\n//         '& .actions': {\n//           color: 'text.secondary',\n//         },\n//         '& .textPrimary': {\n//           color: 'text.primary',\n//         },\n//       }}\n//     >\n//       <DataGridPro\n//         rows={rows}\n//         columns={columns}\n//         editMode=\"row\"\n//         rowModesModel={rowModesModel}\n//         onRowEditStart={handleRowEditStart}\n//         onRowEditStop={handleRowEditStop}\n//         processRowUpdate={processRowUpdate}\n//         components={{\n//           Toolbar: EditToolbar,\n//         }}\n//         componentsProps={{\n//           toolbar: { setRows, setRowModesModel },\n//         }}\n//         experimentalFeatures={{ newEditingApi: true }}\n//       />\n//     </Box>\n//   );\n// }\n"],"mappings},"metadata":{},"sourceType":"module"}