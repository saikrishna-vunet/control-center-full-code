{"ast":null,"code":"// import * as React from 'react';\n// import { alpha } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableHead from '@mui/material/TableHead';\n// import TablePagination from '@mui/material/TablePagination';\n// import TableRow from '@mui/material/TableRow';\n// import TableSortLabel from '@mui/material/TableSortLabel';\n// import Toolbar from '@mui/material/Toolbar';\n// import Typography from '@mui/material/Typography';\n// import Paper from '@mui/material/Paper';\n// import Checkbox from '@mui/material/Checkbox';\n// import IconButton from '@mui/material/IconButton';\n// import Tooltip from '@mui/material/Tooltip';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import Switch from '@mui/material/Switch';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import FilterListIcon from '@mui/icons-material/FilterList';\n// import { visuallyHidden } from '@mui/utils';\n// import PlayCircleOutlineRoundedIcon from '@mui/icons-material/PlayCircleOutlineRounded';\n// import PauseCircleOutlineRoundedIcon from '@mui/icons-material/PauseCircleOutlineRounded';\n// import AssignmentRoundedIcon from '@mui/icons-material/AssignmentRounded';\n// import SearchBar from \"material-ui-search-bar\";\n// import axios from 'axios';\n// interface Data {\n//   name:string,\n//   type:string,\n//   runninginstance:number,\n//   nodes:number,\n//   nodelist:string,\n// }\n// function createData(\n//     name:string,\n//     type:string,\n//     runninginstance:number,\n//     nodes:number,\n//     nodelist:string,\n// ): Data {\n//   return {\n//     name,\n//     type,\n//     runninginstance,\n//     nodes,\n//     nodelist \n//   };\n// }\n// function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// type Order = 'asc' | 'desc';\n// function getComparator<Key extends keyof any>(\n//   order: Order,\n//   orderBy: Key,\n// ): (\n//   a: { [key in Key]: number | string },\n//   b: { [key in Key]: number | string },\n// ) => number {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n// function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n//   const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n// interface HeadCell {\n//   disablePadding: boolean;\n//   id: keyof Data;\n//   label: string;\n//   numeric: boolean;\n// }\n// const headCells: readonly HeadCell[] = [\n//   {\n//     id: 'name',\n//     numeric: false,\n//     disablePadding: false,\n//     label: 'Name',\n//   },\n//   {\n//     id: 'type',\n//     numeric: false,\n//     disablePadding: false,\n//     label: 'Type',\n//   },\n//   {\n//     id: 'runninginstance',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Instances',\n//   },\n//   {\n//     id: 'nodes',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Nodes',\n//   },\n//   {\n//     id: 'nodelist',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Node List',\n//   },\n// ];\n// interface EnhancedTableProps {\n//   numSelected: number;\n//   onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\n//   onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n//   order: Order;\n//   orderBy: string;\n//   rowCount: number;\n// }\n// function EnhancedTableHead(props: EnhancedTableProps) {\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\n//     props;\n//   const createSortHandler =\n//     (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\n//       onRequestSort(event, property);\n//     };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               'aria-label': 'select all services',\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align= 'left' //{headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : 'asc'}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// interface EnhancedTableToolbarProps {\n//   numSelected: number;\n// }\n// const EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\n//   const { numSelected } = props;\n//   return (\n//     <Toolbar\n//       sx={{\n//         pl: { sm: 2 },\n//         pr: { xs: 1, sm: 1 },\n//         ...(numSelected > 0 && {\n//           bgcolor: (theme) =>\n//             alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n//         }),\n//       }}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//           component=\"div\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           variant=\"h6\"\n//           id=\"tableTitle\"\n//           component=\"div\"\n//         >\n//          Services\n//         </Typography>\n//       )}\n//       {numSelected > 0 ? (\n//         <>\n//         <Tooltip title=\"Play\">\n//         <IconButton>\n//           <PlayCircleOutlineRoundedIcon/>\n//         </IconButton>\n//       </Tooltip>\n//       <Tooltip title=\"Pause\">\n//         <IconButton>\n//           <PauseCircleOutlineRoundedIcon/>\n//         </IconButton>\n//       </Tooltip>\n//         <Tooltip title=\"Delete\">\n//           <IconButton>\n//             <DeleteIcon />\n//           </IconButton>\n//         </Tooltip>\n//         </>\n//       ) : (\n//         <Tooltip title=\"Expanded view\">\n//           <IconButton>\n//            <AssignmentRoundedIcon/>\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//     </Toolbar>\n//   );\n// };\n// export default function ServicesTablejson() {\n//   const [rows,setRows1]=React.useState<any[]>([]);\n// //   const url = `https://my-json-server.typicode.com/sakthi-vunet/dummyjson/list`;\n// //         axios.get(url).then(response => response.data)\n// //         .then((data) => {\n// //           setRows1(data.data);\n// //           })\n// const getProductData = async () => {\n//     try {\n//       const data = await axios.get(\n//         `https://my-json-server.typicode.com/sakthi-vunet/dummyjson/list`\n//       );\n//       setRows1(data.data);\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   };\n//   React.useEffect(() => {\n//     getProductData();\n//   }, []);\n//   const [order, setOrder] = React.useState<Order>('asc');\n//   const [orderBy, setOrderBy] = React.useState<keyof Data>('name');\n//   const [selected, setSelected] = React.useState<readonly string[]>([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [searched, setSearched] = React.useState(\"\");\n//   const [rows1,setRows]=React.useState<Data[]>(rows);\n//     const requestSearch = (searchedVal: string) => {\n//       const filteredRows = rows.filter((row) => {\n//         return row.name.toLowerCase().includes(searchedVal.toLowerCase());\n//       });\n//       setRows(filteredRows);\n//     };\n//     const cancelSearch = () => {\n//       setSearched(\"\");\n//       requestSearch(searched);\n//     };\n//   const handleRequestSort = (\n//     event: React.MouseEvent<unknown>,\n//     property: keyof Data,\n//   ) => {\n//     const isAsc = orderBy === property && order === 'asc';\n//     setOrder(isAsc ? 'desc' : 'asc');\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     if (event.target.checked) {\n//       const newSelecteds = rows.map((n) => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected: readonly string[] = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event: unknown, newPage: number) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   const isSelected = (name: string) => selected.indexOf(name) !== -1;\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n//   return (\n//     <Box sx={{ width: '100%' }}>\n//       <Paper sx={{ width: '100%', mb: 2 }}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <Paper sx={{ width:'20%',textAlign:'center'}}>\n//         {/* <SearchBar\n//         // value={searched}\n//         onChange={(e) => {\n//             setSearched(e.target.value);}}\n//         // onCancelSearch={() => cancelSearch()}\n//         /> */}\n//         </Paper>\n//         <TableContainer>\n//           <Table\n//             sx={{ minWidth: 750 }}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n//               rows.slice().sort(getComparator(order, orderBy)) */}\n//               {rows1.slice().sort(getComparator(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n//                   return (\n//                     {rows.map((item,i)=>(\n//                     <TableRow\n//                       hover\n//                       onClick={(event) => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={i}\n//                       selected={isItemSelected}\n//                       sx={{padding:\"checkbox\"}}                      \n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           color=\"primary\"\n//                           checked={isItemSelected}\n//                           inputProps={{\n//                             'aria-labelledby': labelId,\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell\n//                         component=\"th\"\n//                         id={labelId}\n//                         scope=\"row\"\n//                         padding=\"none\"\n//                         align=\"left\"\n//                       >\n//                         {item.name}\n//                       </TableCell>\n//                       <TableCell align=\"left\">{item.type}</TableCell>\n//                       <TableCell align=\"left\">{item.runninginstance}</TableCell>\n//                       <TableCell align=\"left\">{item.nodes}</TableCell>\n//                       <TableCell align=\"left\">{item.nodelist}</TableCell>\n//                     </TableRow>\n//                   )\n//                 )}\n//               {emptyRows > 0 && (\n//                 <TableRow\n//                   style={{\n//                     height: (dense ? 33 : 53) * emptyRows,\n//                   }}\n//                 >\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )\n//               }\n//             }\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           onPageChange={handleChangePage}\n//           onRowsPerPageChange={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     </Box>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/home/sakthi/vunet/apps/control-center/src/pages /Servicesjson.tsx"],"sourcesContent":["// import * as React from 'react';\n// import { alpha } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableHead from '@mui/material/TableHead';\n// import TablePagination from '@mui/material/TablePagination';\n// import TableRow from '@mui/material/TableRow';\n// import TableSortLabel from '@mui/material/TableSortLabel';\n// import Toolbar from '@mui/material/Toolbar';\n// import Typography from '@mui/material/Typography';\n// import Paper from '@mui/material/Paper';\n// import Checkbox from '@mui/material/Checkbox';\n// import IconButton from '@mui/material/IconButton';\n// import Tooltip from '@mui/material/Tooltip';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import Switch from '@mui/material/Switch';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import FilterListIcon from '@mui/icons-material/FilterList';\n// import { visuallyHidden } from '@mui/utils';\n// import PlayCircleOutlineRoundedIcon from '@mui/icons-material/PlayCircleOutlineRounded';\n// import PauseCircleOutlineRoundedIcon from '@mui/icons-material/PauseCircleOutlineRounded';\n// import AssignmentRoundedIcon from '@mui/icons-material/AssignmentRounded';\n// import SearchBar from \"material-ui-search-bar\";\n// import axios from 'axios';\n\n\n\n// interface Data {\n//   name:string,\n//   type:string,\n//   runninginstance:number,\n//   nodes:number,\n//   nodelist:string,\n  \n// }\n\n// function createData(\n//     name:string,\n//     type:string,\n//     runninginstance:number,\n//     nodes:number,\n//     nodelist:string,\n      \n// ): Data {\n\n//   return {\n//     name,\n//     type,\n//     runninginstance,\n//     nodes,\n//     nodelist \n\n//   };\n// }\n\n// function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// type Order = 'asc' | 'desc';\n\n// function getComparator<Key extends keyof any>(\n//   order: Order,\n//   orderBy: Key,\n// ): (\n//   a: { [key in Key]: number | string },\n//   b: { [key in Key]: number | string },\n// ) => number {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n\n\n// function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n//   const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n\n// interface HeadCell {\n//   disablePadding: boolean;\n//   id: keyof Data;\n//   label: string;\n//   numeric: boolean;\n// }\n\n// const headCells: readonly HeadCell[] = [\n//   {\n//     id: 'name',\n//     numeric: false,\n//     disablePadding: false,\n//     label: 'Name',\n//   },\n//   {\n//     id: 'type',\n//     numeric: false,\n//     disablePadding: false,\n//     label: 'Type',\n//   },\n//   {\n//     id: 'runninginstance',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Instances',\n//   },\n//   {\n//     id: 'nodes',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Nodes',\n//   },\n//   {\n//     id: 'nodelist',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Node List',\n//   },\n\n// ];\n\n// interface EnhancedTableProps {\n//   numSelected: number;\n//   onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\n//   onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n//   order: Order;\n//   orderBy: string;\n//   rowCount: number;\n// }\n\n// function EnhancedTableHead(props: EnhancedTableProps) {\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\n//     props;\n//   const createSortHandler =\n//     (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\n//       onRequestSort(event, property);\n//     };\n    \n//   return (\n    \n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               'aria-label': 'select all services',\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align= 'left' //{headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n            \n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : 'asc'}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n\n// interface EnhancedTableToolbarProps {\n//   numSelected: number;\n// }\n\n// const EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\n//   const { numSelected } = props;\n  \n//   return (\n//     <Toolbar\n//       sx={{\n//         pl: { sm: 2 },\n//         pr: { xs: 1, sm: 1 },\n//         ...(numSelected > 0 && {\n//           bgcolor: (theme) =>\n//             alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n//         }),\n//       }}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//           component=\"div\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n        \n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           variant=\"h6\"\n//           id=\"tableTitle\"\n//           component=\"div\"\n//         >\n//          Services\n//         </Typography>\n        \n      \n//       )}\n//       {numSelected > 0 ? (\n//         <>\n//         <Tooltip title=\"Play\">\n//         <IconButton>\n//           <PlayCircleOutlineRoundedIcon/>\n//         </IconButton>\n//       </Tooltip>\n//       <Tooltip title=\"Pause\">\n//         <IconButton>\n//           <PauseCircleOutlineRoundedIcon/>\n//         </IconButton>\n//       </Tooltip>\n//         <Tooltip title=\"Delete\">\n//           <IconButton>\n//             <DeleteIcon />\n//           </IconButton>\n//         </Tooltip>\n//         </>\n//       ) : (\n//         <Tooltip title=\"Expanded view\">\n//           <IconButton>\n//            <AssignmentRoundedIcon/>\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//     </Toolbar>\n//   );\n// };\n\n// export default function ServicesTablejson() {\n\n\n//   const [rows,setRows1]=React.useState<any[]>([]);\n\n// //   const url = `https://my-json-server.typicode.com/sakthi-vunet/dummyjson/list`;\n// //         axios.get(url).then(response => response.data)\n// //         .then((data) => {\n// //           setRows1(data.data);\n// //           })\n// const getProductData = async () => {\n//     try {\n//       const data = await axios.get(\n//         `https://my-json-server.typicode.com/sakthi-vunet/dummyjson/list`\n//       );\n      \n//       setRows1(data.data);\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   };\n//   React.useEffect(() => {\n//     getProductData();\n//   }, []);\n//   const [order, setOrder] = React.useState<Order>('asc');\n//   const [orderBy, setOrderBy] = React.useState<keyof Data>('name');\n//   const [selected, setSelected] = React.useState<readonly string[]>([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [searched, setSearched] = React.useState(\"\");\n//   const [rows1,setRows]=React.useState<Data[]>(rows);\n//     const requestSearch = (searchedVal: string) => {\n//       const filteredRows = rows.filter((row) => {\n//         return row.name.toLowerCase().includes(searchedVal.toLowerCase());\n//       });\n//       setRows(filteredRows);\n//     };\n  \n//     const cancelSearch = () => {\n//       setSearched(\"\");\n//       requestSearch(searched);\n//     };\n//   const handleRequestSort = (\n//     event: React.MouseEvent<unknown>,\n//     property: keyof Data,\n//   ) => {\n//     const isAsc = orderBy === property && order === 'asc';\n//     setOrder(isAsc ? 'desc' : 'asc');\n//     setOrderBy(property);\n//   };\n\n//   const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     if (event.target.checked) {\n//       const newSelecteds = rows.map((n) => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n\n//   const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected: readonly string[] = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n\n//     setSelected(newSelected);\n//   };\n\n//   const handleChangePage = (event: unknown, newPage: number) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n\n\n//   const isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n//   return (\n//     <Box sx={{ width: '100%' }}>\n//       <Paper sx={{ width: '100%', mb: 2 }}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <Paper sx={{ width:'20%',textAlign:'center'}}>\n//         {/* <SearchBar\n//         // value={searched}\n//         onChange={(e) => {\n//             setSearched(e.target.value);}}\n//         // onCancelSearch={() => cancelSearch()}\n        \n//         /> */}\n//         </Paper>\n//         <TableContainer>\n//           <Table\n//             sx={{ minWidth: 750 }}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n//               rows.slice().sort(getComparator(order, orderBy)) */}\n//               {rows1.slice().sort(getComparator(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n\n//                   return (\n//                     {rows.map((item,i)=>(\n//                     <TableRow\n//                       hover\n//                       onClick={(event) => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={i}\n//                       selected={isItemSelected}\n//                       sx={{padding:\"checkbox\"}}                      \n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           color=\"primary\"\n//                           checked={isItemSelected}\n//                           inputProps={{\n//                             'aria-labelledby': labelId,\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell\n//                         component=\"th\"\n//                         id={labelId}\n//                         scope=\"row\"\n//                         padding=\"none\"\n//                         align=\"left\"\n//                       >\n//                         {item.name}\n//                       </TableCell>\n        \n                   \n//                       <TableCell align=\"left\">{item.type}</TableCell>\n//                       <TableCell align=\"left\">{item.runninginstance}</TableCell>\n//                       <TableCell align=\"left\">{item.nodes}</TableCell>\n//                       <TableCell align=\"left\">{item.nodelist}</TableCell>\n//                     </TableRow>\n//                   )\n//                 )}\n//               {emptyRows > 0 && (\n//                 <TableRow\n//                   style={{\n//                     height: (dense ? 33 : 53) * emptyRows,\n//                   }}\n//                 >\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )\n//               }\n//             }\n\n            \n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           onPageChange={handleChangePage}\n//           onRowsPerPageChange={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n      \n//     </Box>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module"}