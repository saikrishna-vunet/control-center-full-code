{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport AddCircleOutlineRoundedIcon from '@mui/icons-material/AddCircleOutlineRounded';\nimport RemoveCircleOutlineOutlinedIcon from '@mui/icons-material/RemoveCircleOutlineOutlined';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport axios from 'axios';\nimport url_backend from '../configs/url';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst Accordion = styled(props => _jsx(MuiAccordion, Object.assign({\n  disableGutters: true,\n  elevation: 0,\n  square: true\n}, props)))(({\n  theme\n}) => ({\n  border: `1px solid ${theme.palette.divider}`,\n  '&:not(:last-child)': {\n    borderBottom: 0\n  },\n  '&:before': {\n    display: 'none'\n  }\n}));\nconst AccordionSummary = styled(props => _jsx(MuiAccordionSummary, Object.assign({\n  expandIcon: _jsx(ArrowForwardIosSharpIcon, {\n    sx: {\n      fontSize: '0.9rem'\n    }\n  })\n}, props)))(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, .05)' : 'rgba(0, 0, 0, .03)',\n  flexDirection: 'row-reverse',\n  '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n    transform: 'rotate(90deg)'\n  },\n  '& .MuiAccordionSummary-content': {\n    marginLeft: theme.spacing(1)\n  }\n}));\nconst AccordionDetails = styled(MuiAccordionDetails)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  borderTop: '1px solid rgba(0, 0, 0, .125)'\n}));\nexport const ServicesEdit = ({\n  data\n}) => {\n  const [expanded, setExpanded] = React.useState('panel1');\n  const [scaledinstances, setScaledInstances] = React.useState(0);\n\n  const get_instances = () => {\n    setScaledInstances(data.map(obj => {\n      return obj.actual_instances;\n    })[0]);\n  };\n\n  const [hostsdata, sethostsData] = React.useState([]); // const [increment,setIncremet]=React.useState(false);\n\n  React.useEffect(() => {\n    get_instances();\n  }, [data]);\n  const request_url = url_backend + '/api/hosts/';\n\n  const getProductData = async () => {\n    try {\n      const data = await axios.get(request_url);\n      sethostsData(data.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  React.useEffect(() => {\n    getProductData();\n  }, []);\n\n  const handleChange = panel => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  const handleHostDelete = (event, name) => {\n    console.log('delete host' + name);\n  };\n\n  const handleHostAdd = event => {\n    console.log('add host');\n  };\n\n  const handleScaleUp = (event, type) => {\n    console.log('scale up ' + type);\n    setScaledInstances(scaledinstances + 1); // if (type === 'Free Scale') {\n    //   alert('no limit. increase intsance');\n    // } else if (type === 'Standalone') {\n    //   alert('only one instance. Increase not possible');\n    // } else if (type === 'Restricted Scale') {\n    //   alert('only 1 instance per port per node. implement port checking');\n    // } else if (type === 'Stateful') {\n    //   alert('only 1 instance per host');\n    // } else {\n    //   alert('type information not applicable');\n    // }\n  };\n\n  const handleScaleDown = (event, type) => {\n    console.log('scale down ' + type);\n    if (scaledinstances === 0) alert('minimum instances limit reached');else setScaledInstances(scaledinstances - 1);\n  };\n\n  const handleDiscard = event => {\n    get_instances();\n  };\n\n  const handleSave = async (event, type, serviceName) => {\n    console.log(scaledinstances);\n    const scalingRequest = {\n      scale: '',\n      instances: 0\n    };\n    const request_url = url_backend + '/api/services/';\n    const x = data.map(obj => {\n      return obj.actual_instances;\n    })[0];\n    const temp = scaledinstances - x;\n\n    if (temp > 0) {\n      if (type === 'Free Scale') {\n        alert('no limitations. ' + temp + ' instances will be added');\n      } else if (type === 'Standalone') {\n        const number_of_hosts = hostsdata.length;\n\n        if (scaledinstances <= number_of_hosts) {\n          alert('only 1 instance per node.' + temp + 'instances will be added');\n        } else {\n          alert('max limit:' + number_of_hosts + ' current scale up value not possible');\n        }\n      } else if (type === 'Stateful') {\n        const labelHosts = checkLabel(serviceName);\n\n        if (scaledinstances <= labelHosts) {\n          alert('only 1 instance per node.' + temp + 'instances will be added');\n        } else {\n          alert('max limit:' + labelHosts + ' current scale up value not possible');\n        }\n      } else {\n        // Restricted Scale\n        const labelHosts = checkLabel(serviceName);\n\n        if (scaledinstances <= labelHosts) {\n          alert('only 1 instance per node.' + temp + 'instances will be added');\n        } else {\n          alert('max limit:' + labelHosts + ' current scale up value not possible');\n        }\n      }\n\n      scalingRequest['scale'] = \"up\";\n      scalingRequest['instances'] = temp;\n    } else if (temp === 0) {\n      alert('No scale up or scale down');\n    } else {\n      const scaledown = Math.abs(temp);\n      alert(' Scale down ' + scaledown + ' instances');\n      scalingRequest['scale'] = \"down\";\n      scalingRequest['instances'] = scaledown;\n    }\n\n    if (scalingRequest['scale'] !== \"\") {\n      console.log(scalingRequest);\n\n      try {\n        const response = await axios({\n          method: \"post\",\n          url: request_url,\n          data: JSON.stringify(scalingRequest),\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        console.log(response);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const checkLabel = serviceName => {\n    let temp = 0;\n    hostsdata.map((row, index) => row.labels.forEach(function (value) {\n      if (value === serviceName) {\n        temp += 1;\n      }\n    }));\n    return temp;\n  };\n\n  const returnInstance = (temp, serviceName) => {\n    let currentInstance = 0;\n    temp.services.forEach(({\n      Name,\n      Instances\n    }) => {\n      if (Name === serviceName) {\n        console.log(Name, Instances);\n        currentInstance = Instances;\n      }\n    });\n    return currentInstance;\n  };\n\n  return _jsx(_Fragment, {\n    children: data.map((row, index) => _jsxs(\"div\", {\n      children: [_jsxs(Typography, {\n        sx: {\n          flex: '1 1 100%'\n        },\n        variant: \"h6\",\n        id: \"tableTitle\",\n        component: \"div\",\n        children: [\"Service \", '>>', \" \", row.name]\n      }), _jsx(\"span\", {\n        style: {\n          marginLeft: '.5rem'\n        }\n      }), _jsxs(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [_jsx(Typography, {\n          children: \"Service Type\"\n        }), _jsx(\"span\", {\n          style: {\n            marginLeft: '.5rem'\n          }\n        }), _jsx(Paper, {\n          variant: \"outlined\",\n          elevation: 8,\n          children: _jsx(Typography, {\n            variant: \"subtitle1\",\n            sx: {\n              paddingTop: '.3rem',\n              paddingBottom: '.3rem',\n              paddingRight: '0.8rem',\n              paddingLeft: '.8rem'\n            },\n            children: row.type\n          })\n        })]\n      }), _jsx(\"span\", {\n        style: {\n          marginLeft: '.5rem'\n        }\n      }), _jsxs(Accordion, {\n        expanded: expanded === 'panel1',\n        onChange: handleChange('panel1'),\n        children: [_jsx(AccordionSummary, {\n          \"aria-controls\": \"panel1d-content\",\n          id: \"panel1d-header\",\n          children: _jsx(Typography, {\n            children: \"Basic Information\"\n          })\n        }), _jsx(AccordionDetails, {\n          children: _jsx(Typography, {\n            children: row.description\n          })\n        })]\n      }), _jsxs(Accordion, {\n        expanded: expanded === 'panel2',\n        onChange: handleChange('panel2'),\n        children: [_jsx(AccordionSummary, {\n          \"aria-controls\": \"panel2d-content\",\n          id: \"panel2d-header\",\n          children: _jsx(Typography, {\n            children: \"Instances and Host Mapping\"\n          })\n        }), _jsx(AccordionDetails, {\n          children: _jsxs(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [_jsxs(\"div\", {\n              style: {\n                display: 'inline-block',\n                float: 'left'\n              },\n              children: [_jsx(Table, {\n                style: {\n                  width: '200px',\n                  border: 1\n                },\n                children: _jsx(TableHead, {\n                  children: _jsxs(TableRow, {\n                    children: [_jsx(TableCell, {\n                      children: \"Instances\"\n                    }), _jsx(TableCell, {\n                      children: _jsx(Tooltip, {\n                        title: \"Scale Up\",\n                        children: _jsx(IconButton, {\n                          onClick: event => handleScaleUp(event, row.type),\n                          children: _jsx(AddCircleOutlineRoundedIcon, {})\n                        })\n                      })\n                    }), _jsx(TableCell, {\n                      align: \"right\",\n                      children: scaledinstances\n                    }), _jsx(TableCell, {\n                      children: _jsx(Tooltip, {\n                        title: \"Scale Down\",\n                        children: _jsx(IconButton, {\n                          onClick: event => handleScaleDown(event, row.type),\n                          children: _jsx(RemoveCircleOutlineOutlinedIcon, {})\n                        })\n                      })\n                    })]\n                  })\n                })\n              }), _jsx(\"span\", {\n                style: {\n                  marginLeft: '.5rem'\n                }\n              }), _jsx(Typography, {\n                children: \"Hosts\"\n              }), _jsx(Table, {\n                style: {\n                  width: '200px'\n                },\n                children: _jsx(TableBody, {\n                  children: row.hosts.map(row => _jsxs(TableRow, {\n                    children: [_jsx(TableCell, {\n                      component: \"th\",\n                      scope: \"row\",\n                      children: row\n                    }), _jsx(TableCell, {\n                      component: \"th\",\n                      scope: \"row\",\n                      children: _jsx(Tooltip, {\n                        title: \"Delete\",\n                        children: _jsx(IconButton, {\n                          onClick: event => handleHostDelete(event, row),\n                          children: _jsx(DeleteIcon, {})\n                        })\n                      })\n                    })]\n                  }, row))\n                })\n              }), _jsx(Tooltip, {\n                title: \"Add Host\",\n                children: _jsx(IconButton, {\n                  onClick: handleHostAdd,\n                  children: _jsx(AddCircleOutlineRoundedIcon, {})\n                })\n              })]\n            }), _jsxs(\"div\", {\n              style: {\n                display: 'inline-block',\n                marginInline: '250px'\n              },\n              children: [_jsx(Typography, {\n                children: \"Current Allocation\"\n              }), _jsx(Table, {\n                style: {\n                  width: '300px'\n                },\n                children: _jsx(TableBody, {\n                  children: hostsdata.map((tuple, index) => _jsxs(TableRow, {\n                    children: [_jsx(TableCell, {\n                      component: \"th\",\n                      scope: \"row\",\n                      children: tuple.name\n                    }), _jsx(TableCell, {\n                      children: returnInstance(tuple, row.name)\n                    })]\n                  }, index))\n                })\n              }), _jsxs(Stack, {\n                spacing: 2,\n                direction: \"row\",\n                margin: \"75px\",\n                children: [_jsx(Button, {\n                  variant: \"contained\",\n                  onClick: event => handleSave(event, row.type, row.name),\n                  children: \"Save\"\n                }), _jsx(Button, {\n                  variant: \"contained\",\n                  onClick: event => handleDiscard(event),\n                  children: \"Discard\"\n                })]\n              })]\n            })]\n          })\n        })]\n      }), _jsxs(Accordion, {\n        expanded: expanded === 'panel3',\n        onChange: handleChange('panel3'),\n        children: [_jsx(AccordionSummary, {\n          \"aria-controls\": \"panel3d-content\",\n          id: \"panel3d-header\",\n          children: _jsx(Typography, {\n            children: \"Health\"\n          })\n        }), _jsx(AccordionDetails, {\n          children: _jsx(Typography, {\n            children: row.state\n          })\n        })]\n      }), _jsxs(Accordion, {\n        expanded: expanded === 'panel4',\n        onChange: handleChange('panel4'),\n        children: [_jsx(AccordionSummary, {\n          \"aria-controls\": \"panel4d-content\",\n          id: \"panel4d-header\",\n          children: _jsx(Typography, {\n            children: \"Labels\"\n          })\n        }), _jsx(AccordionDetails, {\n          children: _jsx(Table, {\n            style: {\n              width: '300px'\n            },\n            children: _jsx(TableBody, {\n              children: row.labels.map(row => _jsx(TableRow, {\n                children: _jsx(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: row\n                })\n              }, row))\n            })\n          })\n        })]\n      })]\n    }))\n  });\n};","map":null,"metadata":{},"sourceType":"module"}