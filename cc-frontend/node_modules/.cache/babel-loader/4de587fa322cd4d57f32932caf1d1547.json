{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport { Checkbox, FormControl, FormControlLabel, FormLabel } from \"@material-ui/core\";\nimport { Controller } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const FormInputMultiCheckbox = ({\n  name,\n  control,\n  setValue,\n  label,\n  list: _list = []\n}) => {\n  const [data, setData] = React.useState({});\n\n  const getAPIData = async () => {\n    try {\n      const data = await axios.get(`http://127.0.0.1:8000/api/labels/`);\n      setData(data.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  React.useEffect(() => {\n    getAPIData();\n  }, []);\n  let temp = String(data[0]);\n  temp = temp.slice(1, -2);\n  const options_list = temp.split(',');\n  const options = options_list == null ? void 0 : options_list.map(function (e) {\n    return {\n      label: e,\n      value: e\n    };\n  });\n  console.log(options); // const [selectedItems, setSelectedItems] = useState<string[]>([]);\n\n  const [selectedItems, setSelectedItems] = useState(_list);\n\n  const handleSelect = value => {\n    if (selectedItems !== undefined) {\n      const isPresent = selectedItems.indexOf(value);\n\n      if (isPresent !== -1) {\n        const remaining = selectedItems.filter(item => item !== value);\n        setSelectedItems(remaining);\n      } else {\n        setSelectedItems(prevItems => [...prevItems, value]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setValue(name, selectedItems);\n  }, [selectedItems]);\n  return _jsxs(FormControl, {\n    size: \"small\",\n    variant: \"outlined\",\n    children: [_jsx(FormLabel, {\n      component: \"legend\",\n      children: label\n    }), _jsx(\"div\", {\n      children: options == null ? void 0 : options.map(option => {\n        return _jsx(FormControlLabel, {\n          control: _jsx(Controller, {\n            name: name,\n            render: () => {\n              return _jsx(Checkbox, {\n                checked: selectedItems == null ? void 0 : selectedItems.includes(option.value),\n                onChange: () => handleSelect(option.value)\n              });\n            },\n            control: control\n          }),\n          label: option.label\n        }, option.value);\n      })\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}