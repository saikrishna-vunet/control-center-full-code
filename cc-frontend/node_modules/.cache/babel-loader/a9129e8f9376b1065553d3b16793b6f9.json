{"ast":null,"code":"// import * as React from 'react';\n// import { styled } from '@mui/material/styles';\n// import ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';\n// import MuiAccordion, { AccordionProps } from '@mui/material/Accordion';\n// import MuiAccordionSummary, {\n//   AccordionSummaryProps,\n// } from '@mui/material/AccordionSummary';\n// import MuiAccordionDetails from '@mui/material/AccordionDetails';\n// import Typography from '@mui/material/Typography';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import IconButton from '@mui/material/IconButton';\n// import Tooltip from '@mui/material/Tooltip';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import TableHead from '@material-ui/core/TableHead';\n// import TableRow from '@material-ui/core/TableRow';\n// import Paper from '@material-ui/core/Paper';\n// import AddCircleOutlineRoundedIcon from '@mui/icons-material/AddCircleOutlineRounded';\n// import RemoveCircleOutlineOutlinedIcon from '@mui/icons-material/RemoveCircleOutlineOutlined';\n// import Stack from '@mui/material/Stack';\n// import Button from '@mui/material/Button';\n// import { ServiceData } from './ServicesTable';\n// import Dialog from '@mui/material/Dialog';\n// import DialogActions from '@mui/material/DialogActions';\n// import DialogTitle from '@mui/material/DialogTitle';\n// import { HostsData } from './HostsTable';\n// import axios from 'axios';\n// // import { FormInputRadio } from '../form-components/FormInputRadio';\n// import TextField from '@material-ui/core/TextField';\n// import { Rowing } from '@material-ui/icons';\n// const Accordion = styled((props: AccordionProps) => (\n//   <MuiAccordion disableGutters elevation={0} square {...props} />\n// ))(({ theme }) => ({\n//   border: `1px solid ${theme.palette.divider}`,\n//   '&:not(:last-child)': {\n//     borderBottom: 0,\n//   },\n//   '&:before': {\n//     display: 'none',\n//   },\n// }));\n// const AccordionSummary = styled((props: AccordionSummaryProps) => (\n//   <MuiAccordionSummary\n//     expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />}\n//     {...props}\n//   />\n// ))(({ theme }) => ({\n//   backgroundColor:\n//     theme.palette.mode === 'dark'\n//       ? 'rgba(255, 255, 255, .05)'\n//       : 'rgba(0, 0, 0, .03)',\n//   flexDirection: 'row-reverse',\n//   '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n//     transform: 'rotate(90deg)',\n//   },\n//   '& .MuiAccordionSummary-content': {\n//     marginLeft: theme.spacing(1),\n//   },\n// }));\n// const AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\n//   padding: theme.spacing(2),\n//   borderTop: '1px solid rgba(0, 0, 0, .125)',\n// }));\n// export const ServicesEdit: React.FC<{ data: ServiceData[] }> = ({ data }) => {\n//   const [expanded, setExpanded] = React.useState<string | false>('panel1');\n//   const [open, setOpen] = React.useState(false);\n//   const [scaledinstances,setScaledInstances]=React.useState(data[0].actual_instances);\n//   const [hostsdata, sethostsData] = React.useState<HostsData[]>([]);\n//   const [servicePresent, setServicePresent] = React.useState(false);\n//   const getProductData = async () => {\n//     try {\n//       const data = await axios.get<HostsData[]>(\n//         `http://127.0.0.1:8000/api/hosts/`\n//       );\n//       sethostsData(data.data);\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   };\n//   React.useEffect(() => {\n//     getProductData();\n//   }, []);\n//   const handleClickOpen = () => {\n//     setOpen(true);\n//   };\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n//   const handleChange =\n//     (panel: string) => (event: React.SyntheticEvent, newExpanded: boolean) => {\n//       setExpanded(newExpanded ? panel : false);\n//     };\n//   const handleHostDelete = (event: React.MouseEvent<unknown>, name: string) => {\n//     console.log('delete host' + name);\n//   };\n//   const handleHostAdd = (event: React.MouseEvent<unknown>) => {\n//     console.log('add host');\n//   };\n//   const handleScaleUp = (event: React.MouseEvent<unknown>, type: string) => {\n//     console.log('scale up ' + type);\n//     // handleClickOpen();\n//     if (type === 'Free Scale') {\n//       alert('no limit. increase intsance');\n//     } else if (type === 'Standalone') {\n//       alert('only one instance. Increase not possible');\n//     } else if (type === 'Restricted Scale') {\n//       alert('only 1 instance per port per node. implement port checking');\n//     } else if (type === 'Stateful') {\n//       alert('only 1 instance per host');\n//     } else {\n//       alert('type information not applicable');\n//     }\n//   };\n//   const handleScaleDown = (event: React.MouseEvent<unknown>, type: string) => {\n//     console.log('scale down ' + type);\n//   };\n//   const returnInstance = (temp: HostsData, serviceName: string) => {\n//     let currentInstance = 0;\n//     temp.services.forEach(({ Name, Instances }) => {\n//       if (Name === serviceName) {\n//         console.log(Name, Instances);\n//         currentInstance = Instances;\n//       }\n//     });\n//     return currentInstance;\n//   };\n//   // const name_of_service=data.map(function (e) {\n//   //   return e.name\n//   // })\n//   // const hostsAllocate = hostsdata.map(function (e) {\n//   //   return { name:e.name , instance: returnInstance(e,name_of_service[0]) }\n//   // })\n//   // const handleChangeInput=(event,hostName)=>{\n//   //   console.log(event.target.value);\n//   //   hostsAllocate.forEach(({name,instance})=>{\n//   //     instance=(name===hostName)?(event.target.value):instance;\n//   //     console.log(name,instance);\n//   //   })\n//   //   console.log(hostsAllocate);\n//   // }\n//   return (\n//     <>\n//       {data.map((row, index) => (\n//         <div>\n//           <Typography\n//             sx={{ flex: '1 1 100%' }}\n//             variant=\"h6\"\n//             id=\"tableTitle\"\n//             component=\"div\"\n//           >\n//             Service {'>>'} {row.name}\n//           </Typography>\n//           <span style={{ marginLeft: '.5rem' }} />\n//           <div\n//             style={{\n//               display: 'flex',\n//               alignItems: 'center',\n//             }}\n//           >\n//             <Typography>Service Type</Typography>\n//             <span style={{ marginLeft: '.5rem' }} />\n//             <Paper variant=\"outlined\" elevation={8}>\n//               <Typography\n//                 variant=\"subtitle1\"\n//                 sx={{\n//                   paddingTop: '.3rem',\n//                   paddingBottom: '.3rem',\n//                   paddingRight: '0.8rem',\n//                   paddingLeft: '.8rem',\n//                 }}\n//               >\n//                 {row.type}\n//               </Typography>\n//             </Paper>\n//           </div>\n//           <span style={{ marginLeft: '.5rem' }} />\n//           <Accordion\n//             expanded={expanded === 'panel1'}\n//             onChange={handleChange('panel1')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel1d-content\"\n//               id=\"panel1d-header\"\n//             >\n//               <Typography>Basic Information</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <Typography>{row.description}</Typography>\n//             </AccordionDetails>\n//           </Accordion>\n//           <Accordion\n//             expanded={expanded === 'panel2'}\n//             onChange={handleChange('panel2')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel2d-content\"\n//               id=\"panel2d-header\"\n//             >\n//               <Typography>Instances and Host Mapping</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <div style={{ display: 'flex' }}>\n//                 <div style={{ display: 'inline-block', float: 'left' }}>\n//                   <Table style={{ width: '200px', border: 1 }}>\n//                     <TableHead>\n//                       <TableRow>\n//                         <TableCell>Instances</TableCell>\n//                         <TableCell>\n//                           <Tooltip title=\"Scale Up\">\n//                             <IconButton\n//                               onClick={(event) =>\n//                                 handleScaleUp(event, row.type)\n//                               }\n//                             >\n//                               <AddCircleOutlineRoundedIcon />\n//                             </IconButton>\n//                           </Tooltip>\n//                         </TableCell>\n//                         <TableCell align=\"right\">\n//                           {row.actual_instances}\n//                         </TableCell>\n//                         <TableCell>\n//                           <Tooltip title=\"Scale Down\">\n//                             <IconButton\n//                               onClick={(event) =>\n//                                 handleScaleDown(event, row.type)\n//                               }\n//                             >\n//                               <RemoveCircleOutlineOutlinedIcon />\n//                             </IconButton>\n//                           </Tooltip>\n//                         </TableCell>\n//                       </TableRow>\n//                     </TableHead>\n//                   </Table>\n//                   <span style={{ marginLeft: '.5rem' }} />\n//                   <Typography>Hosts</Typography>\n//                   <Table style={{ width: '200px' }}>\n//                     <TableBody>\n//                       {row.hosts.map((row) => (\n//                         <TableRow key={row}>\n//                           <TableCell component=\"th\" scope=\"row\">\n//                             {row}\n//                           </TableCell>\n//                           <TableCell component=\"th\" scope=\"row\">\n//                             <Tooltip title=\"Delete\">\n//                               <IconButton\n//                                 onClick={(event) =>\n//                                   handleHostDelete(event, row)\n//                                 }\n//                               >\n//                                 <DeleteIcon />\n//                               </IconButton>\n//                             </Tooltip>\n//                           </TableCell>\n//                         </TableRow>\n//                       ))}\n//                     </TableBody>\n//                   </Table>\n//                   <Tooltip title=\"Add Host\">\n//                     <IconButton onClick={handleHostAdd}>\n//                       <AddCircleOutlineRoundedIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </div>\n//                 <div style={{ display: 'inline-block', marginInline: '250px' }}>\n//                   <Typography>Current Allocation</Typography>\n//                   {/* <Table>\n//                     <TableBody>\n//                       {row.hosts.map((row, index) => (\n//                         <TableRow key={row}>\n//                           <TableCell component=\"th\" scope=\"row\">\n//                             {index}\n//                           </TableCell>\n//                           <TableCell align=\"right\">{row}</TableCell>\n//                         </TableRow>\n//                       ))}\n//                     </TableBody>\n//                   </Table> */}\n//                   {\n//                     <Table style={{ width: '300px' }}>\n//                       <TableBody>\n//                         {hostsdata.map((tuple, index) => (\n//                           <TableRow key={index}>\n//                             <TableCell component=\"th\" scope=\"row\">\n//                               {tuple.name}\n//                             </TableCell>\n//                             <TableCell>\n//                               {returnInstance(tuple, row.name)}\n//                             </TableCell>\n//                           </TableRow>\n//                         ))}\n//                       </TableBody>\n//                     </Table>\n//                   }\n//                   <Stack spacing={2} direction=\"row\" margin=\"75px\">\n//                     <Button variant=\"contained\">Save</Button>\n//                     <Button variant=\"contained\">Discard</Button>\n//                   </Stack>\n//                 </div>\n//               </div>\n//             </AccordionDetails>\n//           </Accordion>\n//           <Accordion\n//             expanded={expanded === 'panel3'}\n//             onChange={handleChange('panel3')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel3d-content\"\n//               id=\"panel3d-header\"\n//             >\n//               <Typography>Health</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <Typography>{row.state}</Typography> \n//             </AccordionDetails>\n//           </Accordion>\n//           <Accordion\n//             expanded={expanded === 'panel4'}\n//             onChange={handleChange('panel4')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel4d-content\"\n//               id=\"panel4d-header\"\n//             >\n//               <Typography>Labels</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <Table style={{ width: '300px' }}>\n//                 <TableBody>\n//                   {row.labels.map((row) => (\n//                     <TableRow key={row}>\n//                       <TableCell component=\"th\" scope=\"row\">\n//                         {row}\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </AccordionDetails>\n//           </Accordion>\n//           <div>\n//             <Dialog open={open} onClose={handleClose}>\n//               <DialogTitle>Scale Up / Scale Down</DialogTitle>\n//               {\n//                 <Table style={{ width: '300px' }}>\n//                   <TableBody>\n//                     {hostsdata.map((tuple, index) => (\n//                       <TableRow key={index}>\n//                         <TableCell component=\"th\" scope=\"row\">\n//                           {tuple.name}\n//                         </TableCell>\n//                         <TableCell> \n//             <TextField\n//              type=\"number\"\n//               name=\"instance\"\n//               label=\"\"\n//               variant=\"filled\"\n//               value={returnInstance(tuple,row.name)}\n//               onChange={event => handleChangeInput(event,tuple.name)}\n//             /></TableCell>\n//                       </TableRow>\n//                     ))}\n//                   </TableBody>\n//                 </Table>\n//               }\n//               <DialogActions>\n//                 <Button onClick={handleClose}>Save</Button>\n//               </DialogActions>\n//             </Dialog>\n//           </div>\n//         </div>\n//       ))}\n//     </>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/home/sakthi/vunet/apps/control-center/src/pages /ServicesEdit.tsx"],"sourcesContent":["// import * as React from 'react';\n// import { styled } from '@mui/material/styles';\n// import ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp';\n// import MuiAccordion, { AccordionProps } from '@mui/material/Accordion';\n// import MuiAccordionSummary, {\n//   AccordionSummaryProps,\n// } from '@mui/material/AccordionSummary';\n// import MuiAccordionDetails from '@mui/material/AccordionDetails';\n// import Typography from '@mui/material/Typography';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import IconButton from '@mui/material/IconButton';\n// import Tooltip from '@mui/material/Tooltip';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import TableHead from '@material-ui/core/TableHead';\n// import TableRow from '@material-ui/core/TableRow';\n// import Paper from '@material-ui/core/Paper';\n// import AddCircleOutlineRoundedIcon from '@mui/icons-material/AddCircleOutlineRounded';\n// import RemoveCircleOutlineOutlinedIcon from '@mui/icons-material/RemoveCircleOutlineOutlined';\n// import Stack from '@mui/material/Stack';\n// import Button from '@mui/material/Button';\n// import { ServiceData } from './ServicesTable';\n// import Dialog from '@mui/material/Dialog';\n// import DialogActions from '@mui/material/DialogActions';\n// import DialogTitle from '@mui/material/DialogTitle';\n// import { HostsData } from './HostsTable';\n// import axios from 'axios';\n// // import { FormInputRadio } from '../form-components/FormInputRadio';\n// import TextField from '@material-ui/core/TextField';\n// import { Rowing } from '@material-ui/icons';\n\n// const Accordion = styled((props: AccordionProps) => (\n//   <MuiAccordion disableGutters elevation={0} square {...props} />\n// ))(({ theme }) => ({\n//   border: `1px solid ${theme.palette.divider}`,\n//   '&:not(:last-child)': {\n//     borderBottom: 0,\n//   },\n//   '&:before': {\n//     display: 'none',\n//   },\n// }));\n\n// const AccordionSummary = styled((props: AccordionSummaryProps) => (\n//   <MuiAccordionSummary\n//     expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />}\n//     {...props}\n//   />\n// ))(({ theme }) => ({\n//   backgroundColor:\n//     theme.palette.mode === 'dark'\n//       ? 'rgba(255, 255, 255, .05)'\n//       : 'rgba(0, 0, 0, .03)',\n//   flexDirection: 'row-reverse',\n//   '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n//     transform: 'rotate(90deg)',\n//   },\n//   '& .MuiAccordionSummary-content': {\n//     marginLeft: theme.spacing(1),\n//   },\n// }));\n\n// const AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\n//   padding: theme.spacing(2),\n//   borderTop: '1px solid rgba(0, 0, 0, .125)',\n// }));\n\n// export const ServicesEdit: React.FC<{ data: ServiceData[] }> = ({ data }) => {\n//   const [expanded, setExpanded] = React.useState<string | false>('panel1');\n//   const [open, setOpen] = React.useState(false);\n//   const [scaledinstances,setScaledInstances]=React.useState(data[0].actual_instances);\n\n//   const [hostsdata, sethostsData] = React.useState<HostsData[]>([]);\n//   const [servicePresent, setServicePresent] = React.useState(false);\n\n//   const getProductData = async () => {\n//     try {\n//       const data = await axios.get<HostsData[]>(\n//         `http://127.0.0.1:8000/api/hosts/`\n//       );\n\n//       sethostsData(data.data);\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   };\n//   React.useEffect(() => {\n//     getProductData();\n//   }, []);\n\n//   const handleClickOpen = () => {\n//     setOpen(true);\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n\n//   const handleChange =\n//     (panel: string) => (event: React.SyntheticEvent, newExpanded: boolean) => {\n//       setExpanded(newExpanded ? panel : false);\n//     };\n\n//   const handleHostDelete = (event: React.MouseEvent<unknown>, name: string) => {\n//     console.log('delete host' + name);\n//   };\n\n//   const handleHostAdd = (event: React.MouseEvent<unknown>) => {\n//     console.log('add host');\n//   };\n\n//   const handleScaleUp = (event: React.MouseEvent<unknown>, type: string) => {\n//     console.log('scale up ' + type);\n    \n//     // handleClickOpen();\n\n//     if (type === 'Free Scale') {\n//       alert('no limit. increase intsance');\n//     } else if (type === 'Standalone') {\n//       alert('only one instance. Increase not possible');\n//     } else if (type === 'Restricted Scale') {\n//       alert('only 1 instance per port per node. implement port checking');\n//     } else if (type === 'Stateful') {\n//       alert('only 1 instance per host');\n//     } else {\n//       alert('type information not applicable');\n//     }\n//   };\n\n//   const handleScaleDown = (event: React.MouseEvent<unknown>, type: string) => {\n//     console.log('scale down ' + type);\n//   };\n\n \n//   const returnInstance = (temp: HostsData, serviceName: string) => {\n//     let currentInstance = 0;\n//     temp.services.forEach(({ Name, Instances }) => {\n//       if (Name === serviceName) {\n//         console.log(Name, Instances);\n//         currentInstance = Instances;\n//       }\n//     });\n//     return currentInstance;\n//   };\n\n//   // const name_of_service=data.map(function (e) {\n//   //   return e.name\n//   // })\n//   // const hostsAllocate = hostsdata.map(function (e) {\n//   //   return { name:e.name , instance: returnInstance(e,name_of_service[0]) }\n//   // })\n\n//   // const handleChangeInput=(event,hostName)=>{\n//   //   console.log(event.target.value);\n//   //   hostsAllocate.forEach(({name,instance})=>{\n//   //     instance=(name===hostName)?(event.target.value):instance;\n//   //     console.log(name,instance);\n//   //   })\n//   //   console.log(hostsAllocate);\n//   // }\n  \n\n\n//   return (\n//     <>\n//       {data.map((row, index) => (\n//         <div>\n//           <Typography\n//             sx={{ flex: '1 1 100%' }}\n//             variant=\"h6\"\n//             id=\"tableTitle\"\n//             component=\"div\"\n//           >\n//             Service {'>>'} {row.name}\n//           </Typography>\n\n//           <span style={{ marginLeft: '.5rem' }} />\n//           <div\n//             style={{\n//               display: 'flex',\n//               alignItems: 'center',\n//             }}\n//           >\n//             <Typography>Service Type</Typography>\n//             <span style={{ marginLeft: '.5rem' }} />\n//             <Paper variant=\"outlined\" elevation={8}>\n//               <Typography\n//                 variant=\"subtitle1\"\n//                 sx={{\n//                   paddingTop: '.3rem',\n//                   paddingBottom: '.3rem',\n//                   paddingRight: '0.8rem',\n//                   paddingLeft: '.8rem',\n//                 }}\n//               >\n//                 {row.type}\n//               </Typography>\n//             </Paper>\n//           </div>\n//           <span style={{ marginLeft: '.5rem' }} />\n//           <Accordion\n//             expanded={expanded === 'panel1'}\n//             onChange={handleChange('panel1')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel1d-content\"\n//               id=\"panel1d-header\"\n//             >\n//               <Typography>Basic Information</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <Typography>{row.description}</Typography>\n//             </AccordionDetails>\n//           </Accordion>\n//           <Accordion\n//             expanded={expanded === 'panel2'}\n//             onChange={handleChange('panel2')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel2d-content\"\n//               id=\"panel2d-header\"\n//             >\n//               <Typography>Instances and Host Mapping</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <div style={{ display: 'flex' }}>\n//                 <div style={{ display: 'inline-block', float: 'left' }}>\n//                   <Table style={{ width: '200px', border: 1 }}>\n//                     <TableHead>\n//                       <TableRow>\n//                         <TableCell>Instances</TableCell>\n//                         <TableCell>\n//                           <Tooltip title=\"Scale Up\">\n//                             <IconButton\n//                               onClick={(event) =>\n//                                 handleScaleUp(event, row.type)\n//                               }\n//                             >\n//                               <AddCircleOutlineRoundedIcon />\n//                             </IconButton>\n//                           </Tooltip>\n//                         </TableCell>\n//                         <TableCell align=\"right\">\n//                           {row.actual_instances}\n//                         </TableCell>\n//                         <TableCell>\n//                           <Tooltip title=\"Scale Down\">\n//                             <IconButton\n//                               onClick={(event) =>\n//                                 handleScaleDown(event, row.type)\n//                               }\n//                             >\n//                               <RemoveCircleOutlineOutlinedIcon />\n//                             </IconButton>\n//                           </Tooltip>\n//                         </TableCell>\n//                       </TableRow>\n//                     </TableHead>\n//                   </Table>\n//                   <span style={{ marginLeft: '.5rem' }} />\n//                   <Typography>Hosts</Typography>\n//                   <Table style={{ width: '200px' }}>\n//                     <TableBody>\n//                       {row.hosts.map((row) => (\n//                         <TableRow key={row}>\n//                           <TableCell component=\"th\" scope=\"row\">\n//                             {row}\n//                           </TableCell>\n//                           <TableCell component=\"th\" scope=\"row\">\n//                             <Tooltip title=\"Delete\">\n//                               <IconButton\n//                                 onClick={(event) =>\n//                                   handleHostDelete(event, row)\n//                                 }\n//                               >\n//                                 <DeleteIcon />\n//                               </IconButton>\n//                             </Tooltip>\n//                           </TableCell>\n//                         </TableRow>\n//                       ))}\n//                     </TableBody>\n//                   </Table>\n//                   <Tooltip title=\"Add Host\">\n//                     <IconButton onClick={handleHostAdd}>\n//                       <AddCircleOutlineRoundedIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </div>\n//                 <div style={{ display: 'inline-block', marginInline: '250px' }}>\n//                   <Typography>Current Allocation</Typography>\n//                   {/* <Table>\n//                     <TableBody>\n//                       {row.hosts.map((row, index) => (\n//                         <TableRow key={row}>\n//                           <TableCell component=\"th\" scope=\"row\">\n//                             {index}\n//                           </TableCell>\n//                           <TableCell align=\"right\">{row}</TableCell>\n//                         </TableRow>\n//                       ))}\n//                     </TableBody>\n//                   </Table> */}\n//                   {\n//                     <Table style={{ width: '300px' }}>\n//                       <TableBody>\n//                         {hostsdata.map((tuple, index) => (\n//                           <TableRow key={index}>\n//                             <TableCell component=\"th\" scope=\"row\">\n//                               {tuple.name}\n//                             </TableCell>\n//                             <TableCell>\n//                               {returnInstance(tuple, row.name)}\n//                             </TableCell>\n//                           </TableRow>\n//                         ))}\n//                       </TableBody>\n//                     </Table>\n//                   }\n\n//                   <Stack spacing={2} direction=\"row\" margin=\"75px\">\n//                     <Button variant=\"contained\">Save</Button>\n//                     <Button variant=\"contained\">Discard</Button>\n//                   </Stack>\n//                 </div>\n//               </div>\n//             </AccordionDetails>\n//           </Accordion>\n\n//           <Accordion\n//             expanded={expanded === 'panel3'}\n//             onChange={handleChange('panel3')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel3d-content\"\n//               id=\"panel3d-header\"\n//             >\n//               <Typography>Health</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <Typography>{row.state}</Typography> \n//             </AccordionDetails>\n//           </Accordion>\n\n//           <Accordion\n//             expanded={expanded === 'panel4'}\n//             onChange={handleChange('panel4')}\n//           >\n//             <AccordionSummary\n//               aria-controls=\"panel4d-content\"\n//               id=\"panel4d-header\"\n//             >\n//               <Typography>Labels</Typography>\n//             </AccordionSummary>\n//             <AccordionDetails>\n//               <Table style={{ width: '300px' }}>\n//                 <TableBody>\n//                   {row.labels.map((row) => (\n//                     <TableRow key={row}>\n//                       <TableCell component=\"th\" scope=\"row\">\n//                         {row}\n//                       </TableCell>\n//                     </TableRow>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </AccordionDetails>\n//           </Accordion>\n//           <div>\n//             <Dialog open={open} onClose={handleClose}>\n//               <DialogTitle>Scale Up / Scale Down</DialogTitle>\n//               {\n//                 <Table style={{ width: '300px' }}>\n//                   <TableBody>\n//                     {hostsdata.map((tuple, index) => (\n//                       <TableRow key={index}>\n//                         <TableCell component=\"th\" scope=\"row\">\n//                           {tuple.name}\n//                         </TableCell>\n//                         <TableCell> \n//             <TextField\n//              type=\"number\"\n//               name=\"instance\"\n//               label=\"\"\n//               variant=\"filled\"\n//               value={returnInstance(tuple,row.name)}\n//               onChange={event => handleChangeInput(event,tuple.name)}\n//             /></TableCell>\n                        \n//                       </TableRow>\n//                     ))}\n//                   </TableBody>\n//                 </Table>\n//               }\n              \n            \n\n//               <DialogActions>\n//                 <Button onClick={handleClose}>Save</Button>\n//               </DialogActions>\n//             </Dialog>\n//           </div>\n//         </div>\n//       ))}\n//     </>\n//   );\n// };\n"],"mappings},"metadata":{},"sourceType":"module"}